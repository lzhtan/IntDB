use std::error::Error;
use tokio::net::TcpListener;
use chrono::Utc;

use intdb::{
    StorageEngine, AppState, create_minimal_router,
    FlowInput, HopInput, Flow,
};

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error>> {
    println!("üöÄ IntDB ÊµãËØïAPIÊúçÂä°Âô®");
    println!("======================");
    
    // ÂàõÂª∫Â≠òÂÇ®ÂºïÊìé
    let mut engine = StorageEngine::new();
    
    // È¢ÑÂä†ËΩΩ‰∏Ä‰∫õÊµãËØïÊï∞ÊçÆ
    populate_test_data(&mut engine)?;
    
    // ÂàõÂª∫Â∫îÁî®Áä∂ÊÄÅ
    let state = AppState::new(engine);
    
    // ÂàõÂª∫ÁÆÄÂåñË∑ØÁî±
    let app = create_minimal_router(state);
    
    // ÂêØÂä®ÊúçÂä°Âô®
    let listener = TcpListener::bind("127.0.0.1:3000").await?;
    println!("üåê ÊúçÂä°Âô®ÂêØÂä®Âú® http://127.0.0.1:3000");
    
    // ÊâìÂç∞ÊµãËØïÁ´ØÁÇπ
    println!("\nüìã ÂèØÁî®Á´ØÁÇπ:");
    println!("   GET  /health          - ÂÅ•Â∫∑Ê£ÄÊü•");
    println!("   POST /flows           - ÊèíÂÖ•Êñ∞ÊµÅ");
    println!("   GET  /flows/{{id}}      - Ëé∑ÂèñÊåáÂÆöÊµÅ");
    println!("   POST /query           - È´òÁ∫ßÊü•ËØ¢");
    
    println!("\nüß™ ÊµãËØïÂëΩ‰ª§:");
    println!("curl http://127.0.0.1:3000/health");
    println!("curl http://127.0.0.1:3000/flows/test_flow_1");
    
    println!("\n‚ö° ÊµãËØïÊü•ËØ¢ÂëΩ‰ª§:");
    println!("curl -X POST http://127.0.0.1:3000/query \\");
    println!("  -H 'Content-Type: application/json' \\");
    println!("  -d '{{\"path_conditions\": [{{\"type\": \"through_switch\", \"value\": {{\"switch_id\": \"s2\"}}}}]}}'");
    
    println!("\nüëç Êåâ Ctrl+C ÂÅúÊ≠¢ÊúçÂä°Âô®");
    
    // ÂêØÂä®ÊúçÂä°Âô®
    axum::serve(listener, app).await?;
    
    Ok(())
}

fn populate_test_data(engine: &mut StorageEngine) -> Result<(), Box<dyn Error>> {
    println!("üìä Âä†ËΩΩÊµãËØïÊï∞ÊçÆ...");
    
    let base_time = Utc::now();
    
    // ÊµãËØïÊµÅ 1: s1 ‚Üí s2 ‚Üí s3 (È´òÂª∂Ëøü)
    let flow1 = FlowInput {
        flow_id: "test_flow_1".to_string(),
        telemetry: vec![
            HopInput {
                switch_id: "s1".to_string(),
                timestamp: base_time,
                queue_util: Some(0.8),
                delay_ns: Some(200),
                bandwidth_bps: Some(1000),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s2".to_string(),
                timestamp: base_time + chrono::Duration::milliseconds(200),
                queue_util: Some(0.9),
                delay_ns: Some(300),
                bandwidth_bps: Some(900),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s3".to_string(),
                timestamp: base_time + chrono::Duration::milliseconds(500),
                queue_util: Some(0.7),
                delay_ns: Some(150),
                bandwidth_bps: Some(950),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
        ],
    };
    
    // ÊµãËØïÊµÅ 2: s1 ‚Üí s2 ‚Üí s4 (‰ΩéÂª∂Ëøü)
    let flow2 = FlowInput {
        flow_id: "test_flow_2".to_string(),
        telemetry: vec![
            HopInput {
                switch_id: "s1".to_string(),
                timestamp: base_time + chrono::Duration::minutes(1),
                queue_util: Some(0.3),
                delay_ns: Some(50),
                bandwidth_bps: Some(1200),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s2".to_string(),
                timestamp: base_time + chrono::Duration::minutes(1) + chrono::Duration::milliseconds(50),
                queue_util: Some(0.4),
                delay_ns: Some(80),
                bandwidth_bps: Some(1100),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s4".to_string(),
                timestamp: base_time + chrono::Duration::minutes(1) + chrono::Duration::milliseconds(130),
                queue_util: Some(0.2),
                delay_ns: Some(40),
                bandwidth_bps: Some(1150),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
        ],
    };
    
    // ÊµãËØïÊµÅ 3: Â§ßÊï∞ÊçÆ‰∏≠ÂøÉË∑ØÂæÑ s1 ‚Üí s2 ‚Üí s5 ‚Üí s6 ‚Üí s7
    let flow3 = FlowInput {
        flow_id: "test_flow_3".to_string(),
        telemetry: vec![
            HopInput {
                switch_id: "s1".to_string(),
                timestamp: base_time + chrono::Duration::minutes(2),
                queue_util: Some(0.5),
                delay_ns: Some(100),
                bandwidth_bps: Some(10000),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s2".to_string(),
                timestamp: base_time + chrono::Duration::minutes(2) + chrono::Duration::milliseconds(100),
                queue_util: Some(0.6),
                delay_ns: Some(120),
                bandwidth_bps: Some(9800),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s5".to_string(),
                timestamp: base_time + chrono::Duration::minutes(2) + chrono::Duration::milliseconds(220),
                queue_util: Some(0.7),
                delay_ns: Some(150),
                bandwidth_bps: Some(9500),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s6".to_string(),
                timestamp: base_time + chrono::Duration::minutes(2) + chrono::Duration::milliseconds(370),
                queue_util: Some(0.8),
                delay_ns: Some(180),
                bandwidth_bps: Some(9200),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
            HopInput {
                switch_id: "s7".to_string(),
                timestamp: base_time + chrono::Duration::minutes(2) + chrono::Duration::milliseconds(550),
                queue_util: Some(0.4),
                delay_ns: Some(90),
                bandwidth_bps: Some(9400),
                drop_count: None,
                egress_port: None,
                ingress_port: None,
            },
        ],
    };
    
    // ÊèíÂÖ•ÊµãËØïÊµÅ
    let flows = vec![flow1, flow2, flow3];
    for flow_input in flows {
        let flow = Flow::try_from(flow_input)?;
        engine.insert_flow(flow)?;
    }
    
    println!("‚úÖ Â∑≤Âä†ËΩΩ {} ‰∏™ÊµãËØïÊµÅ", engine.flow_count());
    
    Ok(())
} 